#https://medium.com/@gvanrossum_83706/left-recursive-peg-grammars-65dab3c580e1

# Grammar
## Identifiers


FieldName: NAME
TypeName: NAME
ProcedureName: NAME ['<' TypeName '>']
ModuleName: NAME
StructName: NAME ['<' TypeName '>']
Var: NAME


## Types

Kind: ModuleAlias '.' StructName
# R | V
# R: Linear resource class value. Must be used, cannot be copied
# V: Non-resource class value. Can be silently discarded, can be copied

GroundType: 'bool'| 'u8' | 'u64' | 'u128' | 'address'

ModuleAlias: ModuleName | 'Self'

BaseType: GroundType | Kind | 'vector' '<' BaseType '>' | TypeName


# k#d.n class 'n' declared in the module referenced by 'd' with kind 'k'
# the kind 'k' cannot differ from the declared kind

Type: ('&' ['mut'])? BaseType

TypeList: Type ('*' Type)*

## Values
Unsigned8 : NUMBER 'u8'
Unsigned64 : NUMBER 'u64'
Unsigned128 : NUMBER 'u128'

u: Unsigned8 | Unsigned64 | Unsigned128 | NUMBER
AccountAddress: '0x' NUMBER

Value : 'True' | 'False' | u | AccountAddress

## Expressions
VarOp :
  | 'copy' '(' Var ')'
  | 'move' '(' Var ')'
  | Var

ReferenceOp1:
  | ModuleOp
  | Exp ['.' FieldName]
  | VarOp


ReferenceOp :
  | '&' ['mut'] ReferenceOp
  | '*' ReferenceOp
  | ReferenceOp1

BinOp :
  | '||'
  | '&&'
  | '>='    # u64 operators
  | '<='
  | '>'
  | '<'
  | '+'
  | '-'
  | '*'
  | '/'
  | '%'
  | '^'
  | '|'
  | '&'
  | '=='    # operators over any ground type
  | '!='

Exp :
  | Exp BinOp Exp
  | '(' Exp ')'
  | StructName '{' (FieldName ':' Exp)+ '}'
  | Call
  | ReferenceOp
  | VarOp
  | '!' Exp
  | Var
  | Value


## Commands

# module operators are available only inside the module that declares n.
ModuleOp :
  |'move_to_sender' '<' ~ StructName '>' '(' Exp ')'
  | 'move_from' '<' ~ StructName '>' '(' Exp ')'
  | 'borrow_global' '<' ~ StructName '>' '(' Exp ')'
  | '&' 'mut' 'borrow_global_mut' '<' ~ StructName '>' '(' Exp ')'
  | 'exists' '<' ~ StructName '>' '(' Exp ')'


Builtin :
  | 'create_account' '(' Exp ')'
  | 'release' '(' Exp ')'
  | 'freeze' '(' Var ')'
  | 'get_txn_sender' '(' ')'
  | 'to_u8' '(' Exp ')'
  | 'to_u64' '(' Exp ')'
  | 'to_u128' '(' Exp ')'


Call :
  | ModuleOp ['.' FieldName]
  | Builtin
  | ModuleAlias '.' ProcedureName '(' [CallInner] ')'

CallInner: Exp (',' Exp)*

Cmd :
  | 'assert' '(' Exp ',' Exp ')'       # type: 'bool * u64 -> unit'
  | 'break'
  | 'continue'
  | 'return' [CallInner]
  | ReferenceOp '=' Exp
  | (Var)+ '=' Call
  | Call
  | StructName '{' FieldName '}' '=' Exp


## Statements
StmtList: (Stmt)*

Stmt :
  | 'if' '(' Exp ')' '{' Stmt ['else' ':' Stmt] '}'
  | 'while' '(' Exp ')' '{' Stmt '}'
  | 'loop' '{' Stmt '}'
  | Cmd ';'


## Imports
Import : 'import' AccountAddress '.' ModuleName ['as' ModuleName] ';'

## Modules
StructDecl :
  | ('resource' | 'class') StructName '{' StructFieldDecl (',' StructFieldDecl)* [','] '}'

StructFieldDecl: FieldName ':' BaseType

ProcedureBody : ('let' Var ':' Type ';' )* StmtList


ProcedureDecl :
  | 'native' ('public')? ProcedureName ProcedureParams [':' TypeList] ';'
  | ('public')? ProcedureName ProcedureParams [':' TypeList] [AcquireList] '{' ProcedureBody '}'

ProcedureParams: '(' [(Var ':' Type) (',' Var ':' Type)* ] ')'
AcquireList : 'acquires' NAME (',' NAME)*

# ','.(Var ':' Type)+ ')' ':' TypeList '{' ProcedureBody '}'


ModuleDecl : 'module' ModuleName '{' (Import)* (StructDecl)* (ProcedureDecl)* '}'


TransactionScript :
  | (Import)* 'public' 'main' '(' ','.(Var ':' Type)+ ')' '{' ProcedureBody '}'

start: (ModuleDecl | TransactionScript) NEWLINE* ENDMARKER
